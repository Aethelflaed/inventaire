#!/usr/bin/env coffee
CONFIG = require 'config'
__ = CONFIG.universalPath
{ elasticsearch:elasticConfig } = CONFIG
fs = require 'fs'

couchdbHost = CONFIG.db.fullHost()
folder = __.path 'scripts', 'couch2elastic4sync'
unless fs.existsSync folder then fs.mkdirSync folder

writeConfigFile = (syncData)->
  console.log syncData
  { database:dbName, type } = syncData
  # Depending on the environment, the exact couchdb database name
  # might take a suffix
  prefixedCouchdbName = CONFIG.db.name dbName

  data =
    database: "#{couchdbHost}/#{prefixedCouchdbName}"
    elasticsearch: "#{elasticConfig.base}/#{dbName}"

  # Allow to pass a type to filter-out documents from another type
  if type?
    # Pass a pre-stringified function as JSON.stringify would just ignore it
    # It will be eval'ed by couch2elastic4sync
    data.filter = buildTypeFilterFunctionString type

  json = JSON.stringify data, null, 2

  fs.writeFile "#{folder}/#{dbName}.json", json, (err, res)->
    if err then console.error err
    else console.log "'#{dbName}' couch2elastic4sync config file generated"

# Using a placeholder string as we can't just return a function with a clojure
# on the expected type name: the function would keep a reference to the variable
# name instead of the variable value
buildTypeFilterFunctionString = (type)-> baseFunctionString.replace 'PLACEHOLDER', type
baseFunctionString = "(doc) => doc.type === \'PLACEHOLDER\'"

writeScript = (dbName)->
  text = """
    #!/usr/bin/env sh
    echo 'Loading #{dbName}'
    couch2elastic4sync --config=#{dbName}.json load &&
    echo 'Done loading. Following #{dbName} changes' &&
    couch2elastic4sync --config=#{dbName}.json
    """
  path = "#{folder}/#{dbName}"

  fs.writeFile path, text, (err, res)->
    if err then console.error err
    else
      # Make it an executable file
      fs.chmod path, '777', (err, res)->
        if err then console.error err
        else console.log "'#{dbName}' couch2elastic4sync script generated"

elasticConfig.sync.forEach (syncData)->
  writeConfigFile syncData
  writeScript syncData.database
